;;; TOOL: run-asmjs
(module
  (memory 1 1)

  (func $i32.load8_s (result i32)
    (i32.load8_s (i32.const 1)))
  (func $i32.load8_u (result i32)
    (i32.load8_u (i32.const 1)))
  (func $i32.load16_s (result i32)
    (i32.load16_s (i32.const 2)))
  (func $i32.load16_u (result i32)
    (i32.load16_u (i32.const 2)))
  (func $i32.load (result i32)
    (i32.load (i32.const 4)))
  (func $f32.load (result f32)
    (f32.load (i32.const 4)))
  (func $f64.load (result f64)
    (f64.load (i32.const 8))))
(;; STDOUT ;;;
(function (global, ffi) {
  var module = function(stdlib, ffi, mem) {
    "use asm";
    function $f0() {
      return $MEM8[1];
    }
    function $f1() {
      return $MEMU8[1];
    }
    function $f2() {
      return $MEM16[2>>1];
    }
    function $f3() {
      return $MEMU16[2>>1];
    }
    function $f4() {
      return $MEM32[4>>2];
    }
    function $f5() {
      return $MEMF32[4>>2];
    }
    function $f6() {
      return $MEMF64[8>>3];
    }
    return {
    };
  };
  var memory = new Uint8Array(65536);
  var instance = module(global, ffi, memory.buffer);
  return instance;
})
;;; STDOUT ;;)
