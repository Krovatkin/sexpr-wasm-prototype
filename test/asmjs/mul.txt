;;; TOOL: run-asmjs
(module
  (func $i32
    (local i32 i32)
    (i32.mul (i32.const 2) (get_local 0))

    (i32.mul (get_local 0) (i32.const 2))

    (i32.mul
      (i32.mul (get_local 0) (i32.const 2))
      (i32.const 2))

    (i32.mul (get_local 0) (get_local 0)))

  (func $f32
    (local f32 f32)
    (f32.mul (f32.const 2) (f32.const 3))

    (f32.mul
      (f32.mul (f32.const 2) (f32.const 3))
      (f32.const 4))

    (f32.mul
      (f32.const 4)
      (f32.mul (f32.const 2) (f32.const 3))))

  (func $f64
    (local f64)
    (f64.mul (f64.const 2) (f64.const 3))

    (f64.mul
      (f64.mul (f64.const 2) (f64.const 3))
      (f64.const 4))

    (f64.mul
      (f64.const 4)
      (f64.mul (f64.const 2) (f64.const 3)))))
(;; STDOUT ;;;
(function (global, ffi) {
  var module = function(stdlib, ffi, mem) {
    "use asm";
    function $f0() {
      var $l0 = 0, $l1 = 0;
      2 * $l0;
      $l0 * 2;
      ($l0 * 2|0) * 2;
      $$imul($l0, $l0);
    }
    function $f1() {
      var $l0 = $$fround(0), $l1 = $$fround(0);
      $$fround(2.000000) * $$fround(3.000000);
      $$fround($$fround(2.000000) * $$fround(3.000000)) * $$fround(4.000000);
      $$fround(4.000000) * $$fround($$fround(2.000000) * $$fround(3.000000));
    }
    function $f2() {
      var $l0 = 0.0;
      2.000000 * 3.000000;
      2.000000 * 3.000000 * 4.000000;
      4.000000 * (2.000000 * 3.000000);
    }
    return {
    };
  };
  var memory = new Uint8Array(0);
  var instance = module(global, ffi, memory.buffer);
  return instance;
})
;;; STDOUT ;;)
