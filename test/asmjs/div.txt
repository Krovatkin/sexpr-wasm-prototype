;;; TOOL: run-asmjs
(module
  (func $i32
    (local i32)
    (i32.div_s (i32.const 1) (i32.const 2))
    (i32.div_u (i32.const 1) (i32.const 2))
    (i32.div_s (get_local 0) (i32.const 2))
    (i32.div_u (get_local 0) (i32.const 2))
    (i32.div_s (i32.const 2) (get_local 0))
    (i32.div_u (i32.const 2) (get_local 0)))

  (func $f32
    (local f32)
    (f32.div (f32.const 1) (f32.const 2))
    (f32.div (get_local 0) (f32.const 2))
    (f32.div (f32.const 3.5) (get_local 0)))

  (func $f64
    (local f64)
    (f64.div (f64.const 1) (f64.const 2))
    (f64.div (get_local 0) (f64.const 2))
    (f64.div (f64.const 1000) (get_local 0))))
(;; STDOUT ;;;
(function (global, ffi) {
  var module = function(stdlib, ffi, mem) {
    "use asm";
    function $f0() {
      var $l0 = 0;
      1 / 2;
      1 / 2;
      ($l0|0) / 2;
      ($l0>>>0) / 2;
      2 / ($l0|0);
      2 / ($l0>>>0);
    }
    function $f1() {
      var $l0 = $$fround(0);
      $$fround(1.000000) / $$fround(2.000000);
      $l0 / $$fround(2.000000);
      $$fround(3.500000) / $l0;
    }
    function $f2() {
      var $l0 = 0.0;
      1.000000 / 2.000000;
      $l0 / 2.000000;
      1000.000000 / $l0;
    }
    return {
    };
  };
  var memory = new Uint8Array(0);
  var instance = module(global, ffi, memory.buffer);
  return instance;
})
;;; STDOUT ;;)
