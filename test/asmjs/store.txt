;;; TOOL: run-asmjs
(module
  (memory 1 1)

  (func $i32.store8
    (i32.store8 (i32.const 1) (i32.const 5)))
  (func $i32.store16
    (i32.store16 (i32.const 2) (i32.const 5)))
  (func $i32.store
    (i32.store (i32.const 4) (i32.const 5)))
  (func $f32.store
    (f32.store (i32.const 4) (f32.const 5)))
  (func $f64.store
    (f64.store (i32.const 8) (f64.const 5))))

(;; STDOUT ;;;
(function (global, ffi) {
  var module = function(stdlib, ffi, mem) {
    "use asm";
    function $f0() {
      $MEM8[1] = 5;
    }
    function $f1() {
      $MEM16[2>>1] = 5;
    }
    function $f2() {
      $MEM32[4>>2] = 5;
    }
    function $f3() {
      $MEMF32[4>>2] = $$fround(5.000000);
    }
    function $f4() {
      $MEMF64[8>>3] = 5.000000;
    }
    return {
    };
  };
  var memory = new Uint8Array(65536);
  var instance = module(global, ffi, memory.buffer);
  return instance;
})
;;; STDOUT ;;)
