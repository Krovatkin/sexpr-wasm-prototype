;;; TOOL: run-asmjs
(module
  (func $f32
    (f32.min (f32.const 1) (f32.const 2))
    (f32.min
      (f32.min (f32.const 1) (f32.const 2))
      (f32.const 3))
    (f32.min
      (f32.const 3)
      (f32.min (f32.const 1) (f32.const 2))))

  (func $f64
    (f64.min (f64.const 1) (f64.const 2))
    (f64.min
      (f64.min (f64.const 1) (f64.const 2))
      (f64.const 3))
    (f64.min
      (f64.const 3)
      (f64.min (f64.const 1) (f64.const 2)))))
(;; STDOUT ;;;
(function (global, ffi) {
  var module = function(stdlib, ffi, mem) {
    "use asm";
    function $f0() {
      $$min($$fround(1.000000), $$fround(2.000000));
      $$min($$min($$fround(1.000000), $$fround(2.000000)), $$fround(3.000000));
      $$min($$fround(3.000000), ($$min($$fround(1.000000), $$fround(2.000000))));
    }
    function $f1() {
      $$min(1.000000, 2.000000);
      $$min($$min(1.000000, 2.000000), 3.000000);
      $$min(3.000000, ($$min(1.000000, 2.000000)));
    }
    return {
    };
  };
  var memory = new Uint8Array(0);
  var instance = module(global, ffi, memory.buffer);
  return instance;
})
;;; STDOUT ;;)
